-- colorshceme mynvim

vim.cmd.highlight('clear')
vim.o.background = 'dark'
vim.g.colors_name = 'mynvim'

-- local hi = function(name, val)
--     -- Force links
--     -- val.force = true
--     -- Make sure that `cterm` attribute is not populated from `gui`
--     -- val.cterm = val.cterm or {}
--     -- Define global highlight
--     vim.api.nvim_set_hl(0, name, val)
-- end

-- colors
local cl = {
    black       = '#000000',
    black_2     = '#222222',
    deep_grey   = '#444444',
    grey        = '#808080',
    dark_grey   = '#a9a9a9',
    light_grey  = '#d3d3d3',
    white_smoke = '#efefef',
    white       = '#ffffff',
    gold        = '#ffd700',
    purple      = '#dcbdfb',
    red         = '#f47067',
    blue        = '#5f5fff',
    skyblue     = '#2e5299',
    dark_blue   = '#0b0b33',
    blue_grey   = '#a3c4cc',
    green       = '#4d804d',
    dark_green  = '#1e3333',
    cyan        = '#00ffff',
}

local highlights = {
    -- General
    Normal       = { bg = 'none' },
    Comment      = { fg = cl.dark_grey },
    Conceal      = { fg = cl.light_grey, bg = cl.grey },
    Constant     = {},
    Identifier   = {},
    Visual       = { fg = cl.white, bg = cl.dark_grey },
    Special      = {},
    -- 'Search   = { fg = cl.black, bg = cl.gold },
    Search       = { link = 'Visual' },
    IncSearch    = { link = 'Search' },
    ColorColumn  = {},
    Cursor       = {},
    CursorColumn = {},
    CursorLine   = {},
    CursorLineNr = {},
    DiffAdd      = { fg = cl.blue_grey },
    DiffChange   = { fg = cl.green },
    DiffDelete   = { fg = cl.red },
    DiffText     = { fg = cl.purple },
    Directory    = {},
    ErrorMsg     = {},
    FoldColumn   = {},
    Folded       = {},
    Ignore       = {},
    LineNr       = {},
    MatchParen   = { bg = cl.cyan },
    ParenMatch   = { link = 'MatchParen' },
    ModeMsg      = { bold = true },
    MoreMsg      = {},

    -- 'Pmenu    = { bg = cl.dark_blue },
    Pmenu        = { bg = cl.deep_grey },
    PmenuSbar    = { link = 'Pmenu' },
    PmenuSel     = { fg = cl.black_2, bg = cl.light_grey },
    PmenuThumb   = { bg = cl.grey },
    PreProc      = {},
    Question     = {},
    SignColumn   = {},
    SpellBad     = {},
    SpellCap     = {},
    SpellLocal   = {},
    SpellRare    = {},
    Statement    = {},
    StatusLine   = { fg = cl.black, bg = cl.white },
    StatusLineNC = { fg = cl.grey, bg = cl.black },
    TabLine      = {},
    TabLineFill  = {},
    TabLineSel   = {},
    TermCursor   = { bg = cl.purple },
    Title        = { bold = true },
    Type         = {},
    Underlined   = {},
    WarningMsg   = {},
    WildMenu     = {},
    WinBar       = {},
    lCursor      = {},
    NonText      = { fg = 'NONE', bg = 'NONE' }, -- eol, extends, precedes
    SpecialKey   = { fg = 'NONE', bg = 'NONE' }, -- nbsp, tab, trail
    EndOfBuffer  = { fg = cl.blue },

    VertSplit      = { link = 'Normal' },
    WinSeparator   = { link = 'VertSplit' },
    WinBarNC       = { link = 'WinBar' },
    LineNrAbove    = { link = 'LineNr' },
    LineNrBelow    = { link = 'LineNr' },
    QuickFixLine   = { link = 'Search' },
    CursorLineSign = { link = 'SignColumn' },
    CursorLineFold = { link = 'FoldColumn' },
    CurSearch      = { link = 'Search' },
    PmenuKind      = { link = 'Pmenu' },
    PmenuKindSel   = { link = 'PmenuSel' },
    PmenuExtra     = { link = 'Pmenu' },
    PmenuExtraSel  = { link = 'PmenuSel' },
    Substitute     = { link = 'Search' },
    Whitespace     = { link = 'NonText' },
    MsgSeparator   = { link = 'StatusLine' },
    NormalFloat    = { link = 'Pmenu' },
    FloatBorder    = { link = 'WinSeparator' },
    FloatTitle     = { link = 'Title' },
    FloatFooter    = { link = 'Title' },

    FloatShadow          = { bg = 'Black', blend = 80 },
    FloatShadowThrough   = { bg = 'Black', blend = 100 },
    RedrawDebugNormal    = { reverse = true, },
    RedrawDebugClear     = { bg = 'Yellow' },
    RedrawDebugComposed  = { bg = 'Green'  },
    RedrawDebugRecompose = { bg = 'Red'  },
    Error                = { fg = 'White', bg = 'Red' },
    Todo                 = { fg = 'Blue', bg = 'Yellow' },

    String         = { link = 'Constant' },
    Character      = { link = 'Constant' },
    Number         = { link = 'Constant' },
    Boolean        = { link = 'Constant' },
    Float          = { link = 'Number' },
    Function       = { link = 'Identifier' },
    Conditional    = { link = 'Statement' },
    Repeat         = { link = 'Statement' },
    Label          = { link = 'Statement' },
    Operator       = { link = 'Statement' },
    Keyword        = { link = 'Statement' },
    Exception      = { link = 'Statement' },
    Include        = { link = 'PreProc' },
    Define         = { link = 'PreProc' },
    Macro          = { link = 'PreProc' },
    PreCondit      = { link = 'PreProc' },
    StorageClass   = { link = 'Type' },
    Structure      = { link = 'Type' },
    Typedef        = { link = 'Type' },
    Tag            = { link = 'Special' },
    SpecialChar    = { link = 'Special' },
    Delimiter      = { link = 'Special' },
    SpecialComment = { link = 'Special' },
    Debug          = { link = 'Special' },

    diagnosticError            = { fg = 'Red' },
    DiagnosticWarn             = { fg = 'Orange' },
    DiagnosticInfo             = { fg = 'LightBlue' },
    DiagnosticHint             = { fg = 'LightGrey' },
    DiagnosticOk               = { fg = 'LightGreen' },
    DiagnosticUnderlineError   = { sp = 'Red', underline = true },
    DiagnosticUnderlineWarn    = { sp = 'Orange', underline = true },
    DiagnosticUnderlineInfo    = { sp = 'LightBlue', underline = true },
    DiagnosticUnderlineHint    = { sp = 'LightGrey', underline = true },
    DiagnosticUnderlineOk      = { sp = 'LightGreen', underline = true },
    DiagnosticVirtualTextError = { link = 'DiagnosticError' },
    DiagnosticVirtualTextWarn  = { link = 'DiagnosticWarn' },
    DiagnosticVirtualTextInfo  = { link = 'DiagnosticInfo' },
    DiagnosticVirtualTextHint  = { link = 'DiagnosticHint' },
    DiagnosticVirtualTextOk    = { link = 'DiagnosticOk' },
    DiagnosticFloatingError    = { link = 'DiagnosticError' },
    DiagnosticFloatingWarn     = { link = 'DiagnosticWarn' },
    DiagnosticFloatingInfo     = { link = 'DiagnosticInfo' },
    DiagnosticFloatingHint     = { link = 'DiagnosticHint' },
    DiagnosticFloatingOk       = { link = 'DiagnosticOk' },
    DiagnosticSignError        = { link = 'DiagnosticError' },
    DiagnosticSignWarn         = { link = 'DiagnosticWarn' },
    DiagnosticSignInfo         = { link = 'DiagnosticInfo' },
    DiagnosticSignHint         = { link = 'DiagnosticHint' },
    DiagnosticSignOk           = { link = 'DiagnosticOk' },
    DiagnosticDeprecated       = { sp = 'Red', strikethrough = true },
    DiagnosticUnnecessary      = { link = 'Comment' },
    LspInlayHint               = { link = 'NonText' },
    SnippetTabstop             = { link = 'Visual' },

    -- Text
    ["@markup.raw"]                 = {},
    ["@markup.link"]                = { link = 'Identifier' },
    ["@markup.heading"]             = { link = 'Title' },
    ["@markup.link.url"]            = { link = 'Underlined' },
    ["@markup.underline"]           = { link = 'Underlined' },
    ["@comment.todo"]               = { link = 'Todo' },

    -- Miscs
    ["@comment"]                    = { link = 'Comment' },
    ["@punctuation"]                = { link = 'Delimiter' },

    -- Constants
    ["@constant"]                   = { link = 'Constant' },
    ["@constant.builtin"]           = { link = 'Special' },
    ["@constant.macro"]             = { link = 'Define' },
    ["@keyword.directive"]          = { link = 'Define' },
    ["@string"]                     = { link = 'String' },
    ["@string.escape"]              = { link = 'SpecialChar' },
    ["@string.special"]             = { link = 'SpecialChar' },
    ["@character"]                  = { link = 'Character' },
    ["@character.special"]          = { link = 'SpecialChar' },
    ["@number"]                     = { link = 'Number' },
    ["@boolean"]                    = { link = 'Boolean' },
    ["@number.float"]               = { link = 'Float' },

    -- Functions
    ["@function"]                   = { link = 'Function' },
    ["@function.builtin"]           = { link = 'Special' },
    ["@function.macro"]             = { link = 'Macro' },
    ["@function.method"]            = { link = 'Function' },
    ["@variable.parameter"]         = { link = 'Identifier' },
    ["@variable.parameter.builtin"]  = { link = 'Special' },
    ["@variable.member"]            = { link = 'Identifier' },
    ["@property"]                   = { link = 'Identifier' },
    ["@attribute"]                  = { link = 'Macro' },
    ["@attribute.builtin"]          = { link = 'Special' },
    ["@constructor"]                = { link = 'Special' },

    -- Keywords
    ["@keyword.conditional"]        = { link = 'Conditional' },
    ["@keyword.repeat"]             = { link = 'Repeat' },
    ["@keyword.type"]               = { link = 'Structure' },
    ["@label"]                      = { link = 'Label' },
    ["@operator"]                   = { link = 'Operator' },
    ["@keyword"]                    = { link = 'Keyword' },
    ["@keyword.exception"]          = { link = 'Exception' },

    ["@variable"]                   = { link = 'Identifier' },
    ["@type"]                       = { link = 'Type' },
    ["@type.definition"]            = { link = 'Typedef' },
    ["@module"]                     = { link = 'Identifier' },
    ["@keyword.import"]             = { link = 'Include' },
    ["@keyword.debug"]              = { link = 'Debug' },
    ["@tag"]                        = { link = 'Tag' },
    ["@tag.builtin"]                = { link = 'Special' },

    -- LSP semantic tokens
    ["@lsp.type.class"]             = { link = 'Structure' },
    ["@lsp.type.comment"]           = { link = 'Comment' },
    ["@lsp.type.decorator"]         = { link = 'Function' },
    ["@lsp.type.enum"]              = { link = 'Structure' },
    ["@lsp.type.enumMember"]        = { link = 'Constant' },
    ["@lsp.type.function"]          = { link = 'Function' },
    ["@lsp.type.interface"]         = { link = 'Structure' },
    ["@lsp.type.macro"]             = { link = 'Macro' },
    ["@lsp.type.method"]            = { link = 'Function' },
    ["@lsp.type.namespace"]         = { link = 'Structure' },
    ["@lsp.type.parameter"]         = { link = 'Identifier' },
    ["@lsp.type.property"]          = { link = 'Identifier' },
    ["@lsp.type.struct"]            = { link = 'Structure' },
    ["@lsp.type.type"]              = { link = 'Type' },
    ["@lsp.type.typeParameter"]     = { link = 'TypeDef' },
    ["@lsp.type.variable"]          = { link = 'Identifier' },
}

for name, val in pairs(highlights) do
    vim.api.nvim_set_hl(0, name, val)
end
